{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"centillion \u00b6 centillion : a document search engine that searches across Github issues, Github pull requests, Github files, Google Drive documents, and Disqus comment threads. a centillion : a very large number consisting of a 1 with 303 zeros after it. One centillion is 3.03 log-times better than a googol. What is centillion \u00b6 centillion is a search engine that can index different kinds of document collections: Google Documents (.docx files), Google Drive files, Github issues, Github files, Github Markdown files, and Disqus comment threads. How centillion works \u00b6 The backend of centillion defines how documents are obtained and how the search index is constructed. centillion builds and updates the search index by using APIs to get the latest versions of documents, and updates its search index accordingly. ( More information ) The centillion frontend provides a web interface for running queries and interfacing with the search index. ( More information ) How to configure centillion \u00b6 To get started with centillion, you will need to create a centillion configuration file. Start with the example configuration file in the examples/ directory. Important details to specify include: Access control (whether to enable it or not) Testing (whether we are testing or not) Search index location on disk Whether to enable Github, and what to index Whether to enable Google Drive, and what to index Whether to enable Disqus, and what to index API keys for all enabled services User interface details See the Configuring centillion page for more information. Quickstart \u00b6 This quickstart will get you started with a centillion instance that is populated with fake documents (avoiding the need to make real API calls). This will allow you to try out centillion before you enable any APIs. Clone: Start by cloning a copy of the repo: cd git clone https://github.com/dcppc/centillion cd ~/centillion/ Virtual Environment: (This step is optional.) Start by setting up a virtual environment, where centillion will be installed: virtualenv vp source vp/bin/activate Install: To install centillion, first install the required packages: pip install -r requirements.txt Now install centillion: python setup.py build install Test that your centillion installation went okay: python -m centillion If you see no output, that means centillion has been successfully installed. If you see an error message, check that you have activated your virtual environment ( source vp/bin/activate ). Run: Crete a temporary working directory: mkdir -p /tmp/my-centillion-instance && cd /tmp/my-centillion-instance Now create a minimal centillion instance with the following Python program: run_centillion.py : import centillion app = centillion.webapp.get_flask_app(config_file='config.py') app.run() The config.py file can be copied verbatim from the example configuration file in the repository: cp ~/centillion/config/config_centillion.example.py config.py Now run the centillion instance by running the script: python run_centillion.py This will run the webapp on port 5000, so navigate to http://localhost:5000 in the browser. centillion does not populate the search index by default, so the first time you run centillion you will not see any documents in the search index. Before you can use centillion, you must manually populate the search index. Populate the Search Index: To populate the search index, visit the control panel: http://localhost:5000/control_panel From here you can re-index the search engine. The example configuration file uses fake documents instead of real API calls, so the reindexing will work even without a network connection. To return to the index, click the centillion banner. Visit the Master List: The master list shows a list of every document indexed by centillion. Visit the master list: http://localhost:5000/master_list Try Searching: Visit the help page for more information about running searches: http://localhost:5000/help Try searching for the following terms to see search results: barley masked figure bananas bacteria microscope Examples \u00b6 To see centillion in action, use the examples provided in the examples/ directory. The fakedocs example populates a centillion instance with fake documents, so you can try out centillion without setting up any API keys. There are also examples for setting up centillion instances that index Github repositories or Google Drive folders. The examples are: Fakedocs example - populate a centillion instance with some fake documents to take centillion for a test drive without setting up any APIs Files: examples/run_centillion_fakedocs.py config/config_centillion_fakedocs.py Google Drive example - populate a centillion instance with Google Drive documents. This requires enabling the Google Drive API and obtaining API credentials. (See APIs page.) Files: examples/run_centillion_gdrive.py config/config_centillion_gdrive.py Github example - populate a centillion instance with files, issues, and pull requests from Github repositories. This requires creating a Github API access token. (See APIs page.) Files: examples/run_centillion_github.py config/config_centillion_github.py Fakedocs example \u00b6 To run the fakedocs example: # make sure you have centillion installed: python -m centillion # run the fakedocs example cd examples/ && python run_centillion_fakedocs.py The centillion instance will be available on port 5000. If you are running in a local machine, access centillion by going to http://localhost:5000 in a browser. (This is identical to the quickstart above.) Github and Google Drive examples \u00b6 To run the Github or Google Drive examples, start by setting up the respective API (see instructions on the APIs page). Next, modify the configuration file and paste your Github API credentials or point to the path of your Google Drive credentials.json file. Now you can run the Github or Google Drive examples: # make sure you have centillion installed: python -m centillion cd examples/ # run the github example python run_centillion_gh.py # run the Google Drive example python run_centillion_gdocs.py Submodules \u00b6 See the Submodules of centillion page for details about how centillion is organized into submodules. The search functionality is implemented in centillion's backend search submodule . This uses the Whoosh library in Python. The web interface is implemented in centillion's frontend webapp submodule . This implements a web interface for centillion using the Flask library in Python. To restrict access to centillion, we implement an OAuth application that verifies users are members of a particular Github organization. See Github authentication layer for details. APIs \u00b6 See the APIs page for an overview of the third-party APIs that centillion interfaces with to populate the search index.","title":"Index"},{"location":"#centillion","text":"centillion : a document search engine that searches across Github issues, Github pull requests, Github files, Google Drive documents, and Disqus comment threads. a centillion : a very large number consisting of a 1 with 303 zeros after it. One centillion is 3.03 log-times better than a googol.","title":"centillion"},{"location":"#what-is-centillion","text":"centillion is a search engine that can index different kinds of document collections: Google Documents (.docx files), Google Drive files, Github issues, Github files, Github Markdown files, and Disqus comment threads.","title":"What is centillion"},{"location":"#how-centillion-works","text":"The backend of centillion defines how documents are obtained and how the search index is constructed. centillion builds and updates the search index by using APIs to get the latest versions of documents, and updates its search index accordingly. ( More information ) The centillion frontend provides a web interface for running queries and interfacing with the search index. ( More information )","title":"How centillion works"},{"location":"#how-to-configure-centillion","text":"To get started with centillion, you will need to create a centillion configuration file. Start with the example configuration file in the examples/ directory. Important details to specify include: Access control (whether to enable it or not) Testing (whether we are testing or not) Search index location on disk Whether to enable Github, and what to index Whether to enable Google Drive, and what to index Whether to enable Disqus, and what to index API keys for all enabled services User interface details See the Configuring centillion page for more information.","title":"How to configure centillion"},{"location":"#quickstart","text":"This quickstart will get you started with a centillion instance that is populated with fake documents (avoiding the need to make real API calls). This will allow you to try out centillion before you enable any APIs. Clone: Start by cloning a copy of the repo: cd git clone https://github.com/dcppc/centillion cd ~/centillion/ Virtual Environment: (This step is optional.) Start by setting up a virtual environment, where centillion will be installed: virtualenv vp source vp/bin/activate Install: To install centillion, first install the required packages: pip install -r requirements.txt Now install centillion: python setup.py build install Test that your centillion installation went okay: python -m centillion If you see no output, that means centillion has been successfully installed. If you see an error message, check that you have activated your virtual environment ( source vp/bin/activate ). Run: Crete a temporary working directory: mkdir -p /tmp/my-centillion-instance && cd /tmp/my-centillion-instance Now create a minimal centillion instance with the following Python program: run_centillion.py : import centillion app = centillion.webapp.get_flask_app(config_file='config.py') app.run() The config.py file can be copied verbatim from the example configuration file in the repository: cp ~/centillion/config/config_centillion.example.py config.py Now run the centillion instance by running the script: python run_centillion.py This will run the webapp on port 5000, so navigate to http://localhost:5000 in the browser. centillion does not populate the search index by default, so the first time you run centillion you will not see any documents in the search index. Before you can use centillion, you must manually populate the search index. Populate the Search Index: To populate the search index, visit the control panel: http://localhost:5000/control_panel From here you can re-index the search engine. The example configuration file uses fake documents instead of real API calls, so the reindexing will work even without a network connection. To return to the index, click the centillion banner. Visit the Master List: The master list shows a list of every document indexed by centillion. Visit the master list: http://localhost:5000/master_list Try Searching: Visit the help page for more information about running searches: http://localhost:5000/help Try searching for the following terms to see search results: barley masked figure bananas bacteria microscope","title":"Quickstart"},{"location":"#examples","text":"To see centillion in action, use the examples provided in the examples/ directory. The fakedocs example populates a centillion instance with fake documents, so you can try out centillion without setting up any API keys. There are also examples for setting up centillion instances that index Github repositories or Google Drive folders. The examples are: Fakedocs example - populate a centillion instance with some fake documents to take centillion for a test drive without setting up any APIs Files: examples/run_centillion_fakedocs.py config/config_centillion_fakedocs.py Google Drive example - populate a centillion instance with Google Drive documents. This requires enabling the Google Drive API and obtaining API credentials. (See APIs page.) Files: examples/run_centillion_gdrive.py config/config_centillion_gdrive.py Github example - populate a centillion instance with files, issues, and pull requests from Github repositories. This requires creating a Github API access token. (See APIs page.) Files: examples/run_centillion_github.py config/config_centillion_github.py","title":"Examples"},{"location":"#fakedocs-example","text":"To run the fakedocs example: # make sure you have centillion installed: python -m centillion # run the fakedocs example cd examples/ && python run_centillion_fakedocs.py The centillion instance will be available on port 5000. If you are running in a local machine, access centillion by going to http://localhost:5000 in a browser. (This is identical to the quickstart above.)","title":"Fakedocs example"},{"location":"#github-and-google-drive-examples","text":"To run the Github or Google Drive examples, start by setting up the respective API (see instructions on the APIs page). Next, modify the configuration file and paste your Github API credentials or point to the path of your Google Drive credentials.json file. Now you can run the Github or Google Drive examples: # make sure you have centillion installed: python -m centillion cd examples/ # run the github example python run_centillion_gh.py # run the Google Drive example python run_centillion_gdocs.py","title":"Github and Google Drive examples"},{"location":"#submodules","text":"See the Submodules of centillion page for details about how centillion is organized into submodules. The search functionality is implemented in centillion's backend search submodule . This uses the Whoosh library in Python. The web interface is implemented in centillion's frontend webapp submodule . This implements a web interface for centillion using the Flask library in Python. To restrict access to centillion, we implement an OAuth application that verifies users are members of a particular Github organization. See Github authentication layer for details.","title":"Submodules"},{"location":"#apis","text":"See the APIs page for an overview of the third-party APIs that centillion interfaces with to populate the search index.","title":"APIs"},{"location":"apis_all/","text":"APIs used \u00b6 To index content provided and hosted by third party services, centillion uses API calls. API keys are provided in the centillion configuration file. Currently, centillion works with the following APIs Google Drive Github Disqus We cover more information about each below. Google Drive \u00b6 The Google Drive API is used to obtain documents from Google Drive. We walk through the steps of setting up the Google Drive API below. Creating an account \u00b6 Create an account: it is important to note that when you provide a Google Drive API key to centillion, centillion will index everything that it can access . This means you shoudl not use individuals' Google accounts to set up centillion. Instead, create a dedicated Google account for your centillion instance and grant it access only to the items or folders that need to be indexed. Enabling the API \u00b6 Once you have created an account, you need to enable the Google Drive API from the Google Cloud console. Instructions for enabling the Google Drive API here: https://developers.google.com/drive/api/v3/enable-sdk Start by opening the Google Cloud console: https://console.cloud.google.com/ In the console, create a new project for your centillion instance. Once you've created your new project, you should be on the APIs page. If not, you can always click the three-line hamburger menu icon (top left) and pick APIs from there. To enable the Google Drive API from the APIs page, click \"Library\" on the left side menu. Search for Google Drive, pick the Google Drive API result, and pick \"Enable\". Creating credentials \u00b6 Once you have enabled the API, you still need to make API keys to call the Google Drive API. You can do this from the APIs page of the Google Cloud console. To create Google Drive credentials from the APIs page, pick \"Credentials\" on the left side menu. Pick Create Credentials, then OAuth credentials. You can add the project name to the \"Consent Screen\", and leave everything else blank. When asked for an application type, pick \"Other\". Once you have done this, a temporary window showing your API keys will pop up. There is no need to save this information. Click \"OK\" and you should see your new credentials show up in the list. On the right side, there is a down arrow icon. Click this to download your OAuth API credentials. This will download client_secret.json . IMPORTANT: client_secret.json contains information specific to the centillion OAuth application you just created, it does not give you the ability to use the API by itself. To do that, you have to log in using your new centillion Google account, and grant permission for the centillion OAuth application to make API calls using that account. (Note that normally the account creating an app is different from the account granting permission to an app.) Converting client secret to credentials \u00b6 Once the Google Drive API is enabled, you can download client_secrets.json , which contains a token and a secret token that enable you to verify you are the true owner of the centillion OAuth application that was just created. To link these to an account, use the scripts/prepare_gdrive.py script in this repo (requires the google-api-python-client package): $ pip install --upgrade google-api-python-client $ ls client_secrets.json client_secrets.json $ python scripts/prepare_gdrive.py This will look for a clients_secret.json in the current directory, and will use it to generate a login link, which a Google user can then visit and log in. This will then create a credentials.json file, which is what centillion needs to make real API calls. Github \u00b6 There are two types of Github API credentials, used for two different things by centillion. First, if centillion is indexing Github content (files or Markdown in a Github repo, or Github issues or pull requests), it will use a Github API access token to access information about the repository. This key is provided in the centillion configuration file. Second, and independent of whether centillion is indexing any Github content , centillion implements an authentication layer to limit access to authorized users only. This authentication layer uses Github accounts to control access (specific Github users, organizations, or teams are whitelisted in the centillion configuration file). This requires an OAuth application, since users log in using their Github account to verify their identity. The OAuth application key and secret are provided in the centillion configuration file. Creating API keys \u00b6 The following instructions cover creating both types of API credentials mentioned above. Before logging into Github, decide what Github account you should use. Like with Google Drive, it is recommended to use a dedicated Github account for your centillion instance. The account should have access to any private repositories that are to be indexed, and should have the ability to view the members of a Github organization or team, if those are used to control access. (For example, if access to centillion is restricted to members of the \"Admins\" group using centillion's access control mechanism, the account used to create API keys must be able to see who is in the \"Admins\" group!) Start by logging into a Github account. Click user icon in upper right and pick Settings. Pick Developer Settings on the left side menu. From here, you can create an API access token or OAuth application credentials. Copy and paste the API keys into the centillion config file. Disqus \u00b6 The Disqus API takes a URL and returns a comment thread. The using the api instructions at the disqus help site is a useful place to start. First, create an api application using an account that is an owner or admin for the Disqus forum/forums being indexed. Once you hae an API key, you can provide it in the centillion configuration file. To test out the ability to list all threads in a forum using the API, you can run the following curl command (replacing the forum name and public API key): $ curl -0 -L \"https://disqus.com/api/3.0/threads/list.json?forum=<forum-name-here>&api_key=<public-api-key-here> This will return json.","title":"APIs"},{"location":"apis_all/#apis-used","text":"To index content provided and hosted by third party services, centillion uses API calls. API keys are provided in the centillion configuration file. Currently, centillion works with the following APIs Google Drive Github Disqus We cover more information about each below.","title":"APIs used"},{"location":"apis_all/#google-drive","text":"The Google Drive API is used to obtain documents from Google Drive. We walk through the steps of setting up the Google Drive API below.","title":"Google Drive"},{"location":"apis_all/#creating-an-account","text":"Create an account: it is important to note that when you provide a Google Drive API key to centillion, centillion will index everything that it can access . This means you shoudl not use individuals' Google accounts to set up centillion. Instead, create a dedicated Google account for your centillion instance and grant it access only to the items or folders that need to be indexed.","title":"Creating an account"},{"location":"apis_all/#enabling-the-api","text":"Once you have created an account, you need to enable the Google Drive API from the Google Cloud console. Instructions for enabling the Google Drive API here: https://developers.google.com/drive/api/v3/enable-sdk Start by opening the Google Cloud console: https://console.cloud.google.com/ In the console, create a new project for your centillion instance. Once you've created your new project, you should be on the APIs page. If not, you can always click the three-line hamburger menu icon (top left) and pick APIs from there. To enable the Google Drive API from the APIs page, click \"Library\" on the left side menu. Search for Google Drive, pick the Google Drive API result, and pick \"Enable\".","title":"Enabling the API"},{"location":"apis_all/#creating-credentials","text":"Once you have enabled the API, you still need to make API keys to call the Google Drive API. You can do this from the APIs page of the Google Cloud console. To create Google Drive credentials from the APIs page, pick \"Credentials\" on the left side menu. Pick Create Credentials, then OAuth credentials. You can add the project name to the \"Consent Screen\", and leave everything else blank. When asked for an application type, pick \"Other\". Once you have done this, a temporary window showing your API keys will pop up. There is no need to save this information. Click \"OK\" and you should see your new credentials show up in the list. On the right side, there is a down arrow icon. Click this to download your OAuth API credentials. This will download client_secret.json . IMPORTANT: client_secret.json contains information specific to the centillion OAuth application you just created, it does not give you the ability to use the API by itself. To do that, you have to log in using your new centillion Google account, and grant permission for the centillion OAuth application to make API calls using that account. (Note that normally the account creating an app is different from the account granting permission to an app.)","title":"Creating credentials"},{"location":"apis_all/#converting-client-secret-to-credentials","text":"Once the Google Drive API is enabled, you can download client_secrets.json , which contains a token and a secret token that enable you to verify you are the true owner of the centillion OAuth application that was just created. To link these to an account, use the scripts/prepare_gdrive.py script in this repo (requires the google-api-python-client package): $ pip install --upgrade google-api-python-client $ ls client_secrets.json client_secrets.json $ python scripts/prepare_gdrive.py This will look for a clients_secret.json in the current directory, and will use it to generate a login link, which a Google user can then visit and log in. This will then create a credentials.json file, which is what centillion needs to make real API calls.","title":"Converting client secret to credentials"},{"location":"apis_all/#github","text":"There are two types of Github API credentials, used for two different things by centillion. First, if centillion is indexing Github content (files or Markdown in a Github repo, or Github issues or pull requests), it will use a Github API access token to access information about the repository. This key is provided in the centillion configuration file. Second, and independent of whether centillion is indexing any Github content , centillion implements an authentication layer to limit access to authorized users only. This authentication layer uses Github accounts to control access (specific Github users, organizations, or teams are whitelisted in the centillion configuration file). This requires an OAuth application, since users log in using their Github account to verify their identity. The OAuth application key and secret are provided in the centillion configuration file.","title":"Github"},{"location":"apis_all/#creating-api-keys","text":"The following instructions cover creating both types of API credentials mentioned above. Before logging into Github, decide what Github account you should use. Like with Google Drive, it is recommended to use a dedicated Github account for your centillion instance. The account should have access to any private repositories that are to be indexed, and should have the ability to view the members of a Github organization or team, if those are used to control access. (For example, if access to centillion is restricted to members of the \"Admins\" group using centillion's access control mechanism, the account used to create API keys must be able to see who is in the \"Admins\" group!) Start by logging into a Github account. Click user icon in upper right and pick Settings. Pick Developer Settings on the left side menu. From here, you can create an API access token or OAuth application credentials. Copy and paste the API keys into the centillion config file.","title":"Creating API keys"},{"location":"apis_all/#disqus","text":"The Disqus API takes a URL and returns a comment thread. The using the api instructions at the disqus help site is a useful place to start. First, create an api application using an account that is an owner or admin for the Disqus forum/forums being indexed. Once you hae an API key, you can provide it in the centillion configuration file. To test out the ability to list all threads in a forum using the API, you can run the following curl command (replacing the forum name and public API key): $ curl -0 -L \"https://disqus.com/api/3.0/threads/list.json?forum=<forum-name-here>&api_key=<public-api-key-here> This will return json.","title":"Disqus"},{"location":"auth/","text":"Github Authentication Layer \u00b6 What is it? \u00b6 The Github authentication layer is an access control layer on top of the centillion web interface. It requires users to log in to access centillion's web interface and can request information such as login, email, or organization membership, and use this to prevent unauthorized access to the search engine and its contents. This enables centillion to index private documents and repositories without creating Yet Another Authentication System. Quick start \u00b6 To get the Github authentication layer going, start by creating a Github OAuth application. Get the public and private application key (client token and client secret token) from the Github application's page. When you create the application, set the callback URL to the base URL of your centillion server, plus /login/github/authorized , as in: https://<url>/login/github/authorized (see \"How does it work?\" section below.) How to test locally \u00b6 If you are testing centillion locally, you can use http://localhost as the callback URL, but to do so you must set the following environment variable: OAUTHLIB_INSECURE_TRANSPORT=\"true\" Alternatively you can set this environment variable from the centillion run script using the Python command: import os os.environ['OAUTHLIB_INSECURE_TRANSPORT'] = True How does it work? \u00b6 The authentication layer uses flask-dance (also see flask-dance Github example ). When users visit the centillion login page, they are automatically redirected to Github.com and asked to provide their Github credentials. When the user logs in, Github passes a token to centillion that allows the authentication layer OAuth application to request information like which organizations the user belongs to. The callback URL specified for the OAuth app is where users are redirected once they have logged in. For flask-dance this is automatically set up to be /login/github/authorized .","title":"Github Authentication"},{"location":"auth/#github-authentication-layer","text":"","title":"Github Authentication Layer"},{"location":"auth/#what-is-it","text":"The Github authentication layer is an access control layer on top of the centillion web interface. It requires users to log in to access centillion's web interface and can request information such as login, email, or organization membership, and use this to prevent unauthorized access to the search engine and its contents. This enables centillion to index private documents and repositories without creating Yet Another Authentication System.","title":"What is it?"},{"location":"auth/#quick-start","text":"To get the Github authentication layer going, start by creating a Github OAuth application. Get the public and private application key (client token and client secret token) from the Github application's page. When you create the application, set the callback URL to the base URL of your centillion server, plus /login/github/authorized , as in: https://<url>/login/github/authorized (see \"How does it work?\" section below.)","title":"Quick start"},{"location":"auth/#how-to-test-locally","text":"If you are testing centillion locally, you can use http://localhost as the callback URL, but to do so you must set the following environment variable: OAUTHLIB_INSECURE_TRANSPORT=\"true\" Alternatively you can set this environment variable from the centillion run script using the Python command: import os os.environ['OAUTHLIB_INSECURE_TRANSPORT'] = True","title":"How to test locally"},{"location":"auth/#how-does-it-work","text":"The authentication layer uses flask-dance (also see flask-dance Github example ). When users visit the centillion login page, they are automatically redirected to Github.com and asked to provide their Github credentials. When the user logs in, Github passes a token to centillion that allows the authentication layer OAuth application to request information like which organizations the user belongs to. The callback URL specified for the OAuth app is where users are redirected once they have logged in. For flask-dance this is automatically set up to be /login/github/authorized .","title":"How does it work?"},{"location":"backend/","text":"Backend \u00b6 Technologies \u00b6 centillion is a Python program built using whoosh (search engine library). It indexes the full text of docx files in Google Documents, just the filenames for non-docx files. The full text of issues and their comments are indexed, and results are grouped by issue. centillion requires Google Drive and Github OAuth apps. The credentials to access these services via their respective APIs can be accomplished by providing the API credentials via the centillion configuration file. Also see APIs page. Configuration \u00b6 See Configuring centillion page. Search class \u00b6 The centillion_search.py file defines a Search class that serves as the backend for centillion. What the Search class does \u00b6 The Search class has two roles: create (and update) the search index (this also requires the Search class to define the schema for storing documents) run queries against the search index and prepare the query results to be rendered by Flask using Jinja templates Methods implemented by the search class \u00b6 The Search class implements the following methods: update_index (update entire search index) open_index (create new schema, open index on disk) add_drive_file (add an individual google drive file item) add_issue (add an individual github issue item) add_ghfile (add an individual github file item) add_emailthread (add groups.io email thread item) add_disqusthread (add disqus comments thread) update_index_gdocs (iterate over all Google Drive documents and add them) update_index_issues (iterate over all Github issues and add them) update_index_ghfiles (iterate over all github files and add them) update_index_emailthreads (iterate over all groups.io subgroup email threads and add them) update_index_disqus (iterate over all disqus comment threads and add them) create_search_results (package search results for the Flask template) get_document_total_count (ask centillion for count of documents of each type) get_list (get a listing of all files of a particular type) search (perform a search on the search index with the user's query) Search Index Schema \u00b6 Schema fields \u00b6 Following is a list of fields contained in the search index schema. (These are not all defined for all document.) id kind fingerprint created_time modified_time indexed_time title url mimetype owner_email owner_name repo_name repo_url issue_title issue_url github_user content Translating new items into the schema \u00b6 centillion contains support for Google Drive, Github, Groups.io, and Disqus APIs. If you want to add a new API with new types of items, you need to map the fields of the new type of items that centillion will index to the search index schema fields above. Not every item needs to define every field. However, if the schema needs new fields added to it, the entire search index will need to be re-built (may be time-consuming).","title":"Backend Search"},{"location":"backend/#backend","text":"","title":"Backend"},{"location":"backend/#technologies","text":"centillion is a Python program built using whoosh (search engine library). It indexes the full text of docx files in Google Documents, just the filenames for non-docx files. The full text of issues and their comments are indexed, and results are grouped by issue. centillion requires Google Drive and Github OAuth apps. The credentials to access these services via their respective APIs can be accomplished by providing the API credentials via the centillion configuration file. Also see APIs page.","title":"Technologies"},{"location":"backend/#configuration","text":"See Configuring centillion page.","title":"Configuration"},{"location":"backend/#search-class","text":"The centillion_search.py file defines a Search class that serves as the backend for centillion.","title":"Search class"},{"location":"backend/#what-the-search-class-does","text":"The Search class has two roles: create (and update) the search index (this also requires the Search class to define the schema for storing documents) run queries against the search index and prepare the query results to be rendered by Flask using Jinja templates","title":"What the Search class does"},{"location":"backend/#methods-implemented-by-the-search-class","text":"The Search class implements the following methods: update_index (update entire search index) open_index (create new schema, open index on disk) add_drive_file (add an individual google drive file item) add_issue (add an individual github issue item) add_ghfile (add an individual github file item) add_emailthread (add groups.io email thread item) add_disqusthread (add disqus comments thread) update_index_gdocs (iterate over all Google Drive documents and add them) update_index_issues (iterate over all Github issues and add them) update_index_ghfiles (iterate over all github files and add them) update_index_emailthreads (iterate over all groups.io subgroup email threads and add them) update_index_disqus (iterate over all disqus comment threads and add them) create_search_results (package search results for the Flask template) get_document_total_count (ask centillion for count of documents of each type) get_list (get a listing of all files of a particular type) search (perform a search on the search index with the user's query)","title":"Methods implemented by the search class"},{"location":"backend/#search-index-schema","text":"","title":"Search Index Schema"},{"location":"backend/#schema-fields","text":"Following is a list of fields contained in the search index schema. (These are not all defined for all document.) id kind fingerprint created_time modified_time indexed_time title url mimetype owner_email owner_name repo_name repo_url issue_title issue_url github_user content","title":"Schema fields"},{"location":"backend/#translating-new-items-into-the-schema","text":"centillion contains support for Google Drive, Github, Groups.io, and Disqus APIs. If you want to add a new API with new types of items, you need to map the fields of the new type of items that centillion will index to the search index schema fields above. Not every item needs to define every field. However, if the schema needs new fields added to it, the entire search index will need to be re-built (may be time-consuming).","title":"Translating new items into the schema"},{"location":"config/","text":"centillion is configured using a single configuration file that contains configuration details for both the flask frontend and the whoosh backend. General Info \u00b6 Example config files \u00b6 Test config files \u00b6 Just one configuration file (frontend+backend) \u00b6 To configure centillion, provide a single configuration file that specifies configuration details for both the Flask webapp frontend and the search backend. There is an example configuration file in the repository at: config/config_flask.example.py The contents of this file are given below: # github oauth (access control) GITHUB_OAUTH_CLIENT_ID = \"XXX\" GITHUB_OAUTH_CLIENT_SECRET = \"YYY\" # github acces token (issues/PRs/files) GITHUB_TOKEN = \"XXX\" # groups.io GROUPSIO_TOKEN = \"XXXXX\" # disqus DISQUS_TOKEN = \"XXXXX\" # location of search index on disk INDEX_DIR = \"search_index\" # labels for repo footer FOOTER_REPO_ORG = \"dcppc\" FOOTER_REPO_NAME = \"centillion\" # Flask secret key SECRET_KEY = 'XXXXX' REPOSITORIES = [ \"dcppc/organize\", \"dcppc/apis\", \"dcppc/data-stewards\", ... ] Pass location with environment variable \u00b6 The location of this configuration file should be passed in to the program running centillion via the CENTILLION_CONFIG environment variable. For example, if the program examples/run_centillion.py contains a script that imports centillion and runs the webapp, you can pass the config file using the CENTILLION_CONFIG environment variable like this: CENTILLION_CONFIG=\"config/config_flask.py\" python examples/run_centillion.py Configuring API access \u00b6 The centillion configuration file must contain API keys for each of the following third-party services: Github Groups.io Google Drive Disqus See APIs page for details about the types of API keys required and how each API is used by centillion.","title":"Configuring Centillion"},{"location":"config/#general-info","text":"","title":"General Info"},{"location":"config/#example-config-files","text":"","title":"Example config files"},{"location":"config/#test-config-files","text":"","title":"Test config files"},{"location":"config/#just-one-configuration-file-frontendbackend","text":"To configure centillion, provide a single configuration file that specifies configuration details for both the Flask webapp frontend and the search backend. There is an example configuration file in the repository at: config/config_flask.example.py The contents of this file are given below: # github oauth (access control) GITHUB_OAUTH_CLIENT_ID = \"XXX\" GITHUB_OAUTH_CLIENT_SECRET = \"YYY\" # github acces token (issues/PRs/files) GITHUB_TOKEN = \"XXX\" # groups.io GROUPSIO_TOKEN = \"XXXXX\" # disqus DISQUS_TOKEN = \"XXXXX\" # location of search index on disk INDEX_DIR = \"search_index\" # labels for repo footer FOOTER_REPO_ORG = \"dcppc\" FOOTER_REPO_NAME = \"centillion\" # Flask secret key SECRET_KEY = 'XXXXX' REPOSITORIES = [ \"dcppc/organize\", \"dcppc/apis\", \"dcppc/data-stewards\", ... ]","title":"Just one configuration file (frontend+backend)"},{"location":"config/#pass-location-with-environment-variable","text":"The location of this configuration file should be passed in to the program running centillion via the CENTILLION_CONFIG environment variable. For example, if the program examples/run_centillion.py contains a script that imports centillion and runs the webapp, you can pass the config file using the CENTILLION_CONFIG environment variable like this: CENTILLION_CONFIG=\"config/config_flask.py\" python examples/run_centillion.py","title":"Pass location with environment variable"},{"location":"config/#configuring-api-access","text":"The centillion configuration file must contain API keys for each of the following third-party services: Github Groups.io Google Drive Disqus See APIs page for details about the types of API keys required and how each API is used by centillion.","title":"Configuring API access"},{"location":"frontend/","text":"Frontend: User access control \u00b6 Because centillion indexes internal and private documents for the Data Commons project, centillion implements a Github authentication layer on top of the Flask server. This authentication layer asks users to log in with their Github accounts, and if the user is a member of the DCPPC organization, they are granted access to the centillion website. See the Github Authentication Layer page for details. Frontend: Flask routes \u00b6 Route: /search \u00b6 By default, the user is redirected to the /search route, which provides a text box in which the user can type their queries. Clicking on the centillion logo at the top will always bring the user back to the search route. Route: /help \u00b6 Below the centillion logo, the user is provided links to an FAQ page and a help page. The help page provides the user with an explanation of how to search for items, an explanation of what items are indexed, and some example queries. Users are also provided with guidance on running advanced queries, the use of search operators, and a list of fields, as well as several examples of date-based criteria: Route: /faq \u00b6 Below the centillion logo, the user is provided links to an FAQ page and a help page. The FAQ page provides the user with answers to frequently-asked questions. Several questions were added based on user feedback. The FAQ covers important issues like licensing of content and information about what content is indexed and what content is not indexed. There is also information about how we protect the privacy of users. Route: /master_list \u00b6 There is a master list of all content indexed by centillion at the master list page, https://search.nihdatacommons.us/master_list . A master list for each type of document indexed by the search engine is displayed in a table: The metadata shown in these tables can be filtered and sorted by clicking on the respective columns. Route: /control_panel \u00b6 The centillion control panel is located at https://search.nihdatacommons.us/control_panel . The control panel allows you to rebuild the search index from scratch. The search index stores versions/contents of files locally, so re-indexing involves going out and asking each API for new versions of a file/document/web page. When you re-index the main search index, it will ask every API for new versions of every document. You can also update only specific types of documents in the search index.","title":"Frontend Web Interface"},{"location":"frontend/#frontend-user-access-control","text":"Because centillion indexes internal and private documents for the Data Commons project, centillion implements a Github authentication layer on top of the Flask server. This authentication layer asks users to log in with their Github accounts, and if the user is a member of the DCPPC organization, they are granted access to the centillion website. See the Github Authentication Layer page for details.","title":"Frontend: User access control"},{"location":"frontend/#frontend-flask-routes","text":"","title":"Frontend: Flask routes"},{"location":"frontend/#route-search","text":"By default, the user is redirected to the /search route, which provides a text box in which the user can type their queries. Clicking on the centillion logo at the top will always bring the user back to the search route.","title":"Route: /search"},{"location":"frontend/#route-help","text":"Below the centillion logo, the user is provided links to an FAQ page and a help page. The help page provides the user with an explanation of how to search for items, an explanation of what items are indexed, and some example queries. Users are also provided with guidance on running advanced queries, the use of search operators, and a list of fields, as well as several examples of date-based criteria:","title":"Route: /help"},{"location":"frontend/#route-faq","text":"Below the centillion logo, the user is provided links to an FAQ page and a help page. The FAQ page provides the user with answers to frequently-asked questions. Several questions were added based on user feedback. The FAQ covers important issues like licensing of content and information about what content is indexed and what content is not indexed. There is also information about how we protect the privacy of users.","title":"Route: /faq"},{"location":"frontend/#route-master_list","text":"There is a master list of all content indexed by centillion at the master list page, https://search.nihdatacommons.us/master_list . A master list for each type of document indexed by the search engine is displayed in a table: The metadata shown in these tables can be filtered and sorted by clicking on the respective columns.","title":"Route: /master_list"},{"location":"frontend/#route-control_panel","text":"The centillion control panel is located at https://search.nihdatacommons.us/control_panel . The control panel allows you to rebuild the search index from scratch. The search index stores versions/contents of files locally, so re-indexing involves going out and asking each API for new versions of a file/document/web page. When you re-index the main search index, it will ask every API for new versions of every document. You can also update only specific types of documents in the search index.","title":"Route: /control_panel"},{"location":"submodules/","text":"Submodules of centillion \u00b6 centillion is implemented as a Python package that can be installed using setup.py and imported using import centillion . The package is structured as two submodules - a backend search submodule, and a frontend webapp submodule. Backend: search submodule \u00b6 See Backend for details. The search submodule implements objects and functions to create or update the search index on disk, load an existing search index, and performing searches with user-provided queries. Frontend: webapp submodule \u00b6 See Frontend for details. The webapp submodule implements the Flask frontend, sets up the Flask routes, implements the Github authentication layer, and serves up static content and Jinja templates.","title":"Submodules"},{"location":"submodules/#submodules-of-centillion","text":"centillion is implemented as a Python package that can be installed using setup.py and imported using import centillion . The package is structured as two submodules - a backend search submodule, and a frontend webapp submodule.","title":"Submodules of centillion"},{"location":"submodules/#backend-search-submodule","text":"See Backend for details. The search submodule implements objects and functions to create or update the search index on disk, load an existing search index, and performing searches with user-provided queries.","title":"Backend: search submodule"},{"location":"submodules/#frontend-webapp-submodule","text":"See Frontend for details. The webapp submodule implements the Flask frontend, sets up the Flask routes, implements the Github authentication layer, and serves up static content and Jinja templates.","title":"Frontend: webapp submodule"}]}